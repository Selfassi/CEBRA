shiny::runApp()
runApp()
runApp()
runApp()
runApp()
?signif
runApp()
runApp()
runApp()
getwd()
runApp()
runApp('~/Dropbox (ENVSECSP)/CEBRA/05 R code/CEBRA')
shiny::runApp()
runApp()
input_app<-read.csv("data/Input_App.csv", stringsAsFactors = FALSE)
input_app["Xyllela","Image_Name"]
input_app[,"Image_Name"]
input_app["Xylella","Image_Name"]
input_app[["Xylella","Image_Name"]]
input_app[input_app$Species=="Xylella","Image_Name"]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
system.time()
humanTime <- function() {
format(Sys.time(), "%Y%m%d-%H%M%OS")
}
humanTime()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
install.packages("crop")
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
rnorm(20,0.6, 0.2)
set.seed(347)
rnorm(20,0.6, 0.2)
set.seed(347)
chance<-rnorm(20,0.6, 0.2)
social<-max(round(rnorm(20,3, 1)),5)
chance
social
round(rnorm(20,3, 1)
round(rnorm(20,3, 1))
social<-max(round(rnorm(20,3, 1)),rep(5,20))
social
set.seed(347)
chance<-rnorm(20,0.6, 0.2)
social<-round(rnorm(20,3, 1))
social
set.seed(347)
chance<-rnorm(20,0.6, 0.2)
social<-round(rnorm(20,3, 1))+1
social
runApp()
runApp()
shiny::runApp()
Sigma <- matrix(c(10,3,3,2),2,2)
Sigma
var(mvrnorm(n = 1000, rep(0, 2), Sigma))
var(mvrnorm(n = 1000, rep(0, 2), Sigma, empirical = TRUE))
x<-mvrnorm(n = 1000, rep(0, 2), Sigma)
install.packages("ellipse")
library(ellipse)
plot(ellipse(0.8), type = 'l')
plot(ellipse(0.3), type = 'l')
plot(ellipse(x), type = 'l')
head(x)
set.seed(101)
n <- 1000
x <- rnorm(n, mean=2)
y <- 1.5 + 0.4*x + rnorm(n)
df <- data.frame(x=x, y=y, group="A")
x <- rnorm(n, mean=2)
y <- 1.5*x + 0.4 + rnorm(n)
df <- rbind(df, data.frame(x=x, y=y, group="B"))
#calculating ellipses
library(ellipse)
df_ell <- data.frame()
for(g in levels(df$group)){
df_ell <- rbind(df_ell, cbind(as.data.frame(with(df[df$group==g,], ellipse(cor(x, y),
scale=c(sd(x),sd(y)),
centre=c(mean(x),mean(y))))),group=g))
}
#drawing
library(ggplot2)
p <- ggplot(data=df, aes(x=x, y=y,colour=group)) + geom_point(size=1.5, alpha=.6) +
geom_path(data=df_ell, aes(x=x, y=y,colour=group), size=1, linetype=2)
p
#drawing
library(ggplot2)
p <- ggplot(data=df, aes(x=x, y=y,colour=group)) + geom_point(size=1.5, alpha=.6) +
geom_path(data=df_ell, aes(x=x, y=y,colour=group), size=1, linetype=1)
p
p <- ggplot(data=df, aes(x=x, y=y,colour=group)) + geom_point(size=1.5, alpha=.6) +
stat_ellipse(data=df, aes(x=x, y=y,colour=group), size=1, linetype=1)
p
#alternative code using stat_ellipse function
p <- ggplot(data=df, aes(x=x, y=y,colour=group)) + geom_point(size=1.5, alpha=.6) +
stat_ellipse(data=df, aes(x=x, y=y,colour=group), size=1, linetype=2)
p
#alternative code using stat_ellipse function
p <- ggplot(data=df, aes(x=x, y=y,colour=group)) + geom_point(size=1.5, alpha=.6) +
stat_ellipse(data=df, aes(x=x, y=y,colour=group), size=1, linetype=2)+
scale_fill_manual(values=c("red","green"))+
scale_linetype_manual(values=c(1,2))
p
#alternative code using stat_ellipse function
p <- ggplot(data=df, aes(x=x, y=y,colour=group)) + geom_point(size=1.5, alpha=.6) +
stat_ellipse(data=df, aes(x=x, y=y,colour=group, fill=factor(df$group)), size=1, linetype=2)+
scale_fill_manual(values=c("red","green"))+
scale_linetype_manual(values=c(1,2))
p
p <- ggplot(data=df, aes(x=x, y=y,colour=group)) + geom_point(size=1.5, alpha=.6) +
stat_ellipse(data=df, aes(x=x, y=y,colour=group, fill=factor(df$group)), size=1, linetype=2,geom="polygon",level=0.8,alpha=0.2)+
scale_fill_manual(values=c("red","green"))+
scale_linetype_manual(values=c(1,2))
p
#alternative code using stat_ellipse function
p <- ggplot(data=df, aes(x=x, y=y,colour=group)) + geom_point(size=1.5, alpha=.6) +
stat_ellipse(data=df, aes(x=x, y=y,colour=group, fill=factor(df$group)), size=1, linetype=2,geom="polygon",level=0.8,alpha=0.2)+
scale_fill_manual(values=c("yellow","green"))+
scale_linetype_manual(values=c(1,2))
p
#alternative code using stat_ellipse function
p <- ggplot(data=df, aes(x=x, y=y,colour=group)) + geom_point(size=1.5, alpha=.6) +
stat_ellipse(data=df, aes(x=x, y=y,colour=group, fill=factor(df$group)), size=1,
geom="polygon",level=0.8,alpha=0.2)+
scale_fill_manual(values=c("yellow","green"))+
scale_linetype_manual(values=c(1,2))
p
#alternative code using stat_ellipse function
p <- ggplot(data=df, aes(x=x, y=y,colour=group)) + geom_point(size=1.5, alpha=.6) +
stat_ellipse(data=df, aes(x=x, y=y,colour=group, fill=factor(df$group)), size=1,
geom="polygon",level=0.8,alpha=0.4)+
scale_fill_manual(values=c("yellow","green"))+
scale_linetype_manual(values=c(1,2))
p
#alternative code using stat_ellipse function
p <- ggplot(data=df, aes(x=x, y=y,colour=group)) + geom_point(size=1.5, alpha=.6) +
stat_ellipse(data=df, aes(x=x, y=y,colour=group, fill=factor(df$group)), size=1,
geom="polygon",level=0.9,alpha=0.4)+
scale_fill_manual(values=c("yellow","green"))+
scale_linetype_manual(values=c(1,2))
p
#alternative code using stat_ellipse function
p <- ggplot(data=df, aes(x=x, y=y,colour=group)) + geom_point(size=1.5, alpha=.6) +
stat_ellipse(data=df, aes(x=x, y=y,colour=group, fill=factor(df$group)), size=1,
geom="polygon",level=1,alpha=0.4)+
scale_fill_manual(values=c("yellow","green"))+
scale_linetype_manual(values=c(1,2))
p
#alternative code using stat_ellipse function
p <- ggplot(data=df, aes(x=x, y=y,colour=group)) + geom_point(size=1.5, alpha=.6) +
stat_ellipse(data=df, aes(x=x, y=y,colour=group, fill=factor(df$group)), size=1,
geom="polygon",level=0.95,alpha=0.4)+
scale_fill_manual(values=c("yellow","green"))+
scale_linetype_manual(values=c(1,2))
p
head(df)
getwd()
getwd()
#Read in data
input_app<-read.csv("data/Input_App.csv", stringsAsFactors = FALSE)
input_app$Species[[1]]
input_app$Species["Xylella"]
input_app$Species["Xyllela"]
input_app["Xyllela"]
input_app[input_app$Species=="Xyllela"]
input_app$Species
input_app[input_app$Species=="Xylella"]
input_app$Monetary_Damage[input_app$Species=="Xylella"]
#Read in data
input_app<-read.csv("data/Input_App.csv", stringsAsFactors = FALSE)
mon_damage<-input_app$Monetary_Damage[input_app$Species=="Xylella"]
risk_dist<-mon_damage*rnorm(10000,mean=input_app$Likelihood[input_app$Species=="Xylella"], sd = 0.1)
management_unc<-rnorm(10000, 0.6, 0.2)
getwd()
#Read in data
input_app<-read.csv("data/Input_App.csv", stringsAsFactors = FALSE)
mon_damage<-input_app$Monetary_Damage[input_app$Species=="Xylella"]
risk_dist<-mon_damage*rnorm(10000,mean=input_app$Likelihood[input_app$Species=="Xylella"], sd = 0.1)
management_unc<-rnorm(10000, 0.6, 0.2)
df<-data.frame(score=mon_damage,management=management_unc, species="Xylella")
mon_damage<-input_app$Monetary_Damage[input_app$Species=="Ug99"]
risk_dist<-mon_damage*rnorm(10000,mean=input_app$Likelihood[input_app$Species=="Ug99"], sd = 0.1)
management_unc<-rnorm(10000, 0.8, 0.1)
df <- rbind(df, data.frame(score=mon_damage,management=management_unc, species="Ug99"))
head(df)
#Read in data
input_app<-read.csv("data/Input_App.csv", stringsAsFactors = FALSE)
mon_damage<-input_app$Monetary_Damage[input_app$Species=="Xylella"]
risk_dist<-mon_damage*rnorm(10000,mean=input_app$Likelihood[input_app$Species=="Xylella"], sd = 0.1)
management_unc<-rnorm(10000, 0.6, 0.2)
df<-data.frame(score=risk_dist,management=management_unc, species="Xylella")
mon_damage<-input_app$Monetary_Damage[input_app$Species=="Ug99"]
risk_dist<-mon_damage*rnorm(10000,mean=input_app$Likelihood[input_app$Species=="Ug99"], sd = 0.1)
management_unc<-rnorm(10000, 0.8, 0.1)
df <- rbind(df, data.frame(score=risk_dist,management=management_unc, species="Ug99"))
head(df)
getwd()
#Read in data
input_app<-read.csv("data/Input_App.csv", stringsAsFactors = FALSE)
mon_damage<-input_app$Monetary_Damage[input_app$Species=="Xylella"]
risk_dist<-mon_damage*rnorm(10000,mean=input_app$Likelihood[input_app$Species=="Xylella"], sd = 0.1)
management_unc<-rnorm(10000, 0.6, 0.2)
df<-data.frame(score=risk_dist,management=management_unc, species="Xylella")
mon_damage<-input_app$Monetary_Damage[input_app$Species=="Ug99"]
risk_dist<-mon_damage*rnorm(10000,mean=input_app$Likelihood[input_app$Species=="Ug99"], sd = 0.1)
management_unc<-rnorm(10000, 0.8, 0.1)
df <- rbind(df, data.frame(score=risk_dist,management=management_unc, species="Ug99"))
head(df)
p <- ggplot(data=df, aes(x=score, y=management,colour=species)) + geom_point(size=1.5, alpha=.6) +
stat_ellipse(data=df, aes(x=score, y=management,colour=species, fill=factor(df$species)), size=1,
geom="polygon",level=0.95,alpha=0.4)+
scale_fill_manual(values=c("yellow","green"))+
scale_linetype_manual(values=c(1,2))
p
p <- ggplot(data=df, aes(x=score, y=management,colour=species)) + geom_point(size=1.5, alpha=.6) +
stat_ellipse(data=df, aes(x=score, y=management,colour=species, fill=factor(df$species)), size=1,
geom="polygon",level=0.95,alpha=0.4)+
scale_fill_manual(values=species)+
p
p <- ggplot(data=df, aes(x=score, y=management,colour=species)) + geom_point(size=1.5, alpha=.6) +
stat_ellipse(data=df, aes(x=score, y=management,colour=species, fill=factor(df$species)), size=1,
geom="polygon",level=0.95,alpha=0.4)+
scale_fill_manual(values=species)
p
p <- ggplot(data=df, aes(x=score, y=management,colour=species)) + geom_point(size=1.5, alpha=.6) +
stat_ellipse(data=df, aes(x=score, y=management,colour=species, fill=factor(df$species)), size=1,
geom="polygon",level=0.95,alpha=0.4)+
scale_fill_manual(values=df$species)
p
p <- ggplot(data=df, aes(x=score, y=management,colour=species)) + geom_point(size=0.5, alpha=.6) +
stat_ellipse(data=df, aes(x=score, y=management,colour=species, fill=factor(df$species)), size=1,
geom="polygon",level=0.95,alpha=0.4)+
scale_fill_manual(values=df$species)
p
p <- ggplot(data=df, aes(x=score, y=management,colour=species)) + geom_point(size=0.5, alpha=.6) +
stat_ellipse(data=df, aes(x=score, y=management,colour=species, fill=factor(df$species)), size=1,
geom="polygon",level=0.95,alpha=0.4)+
scale_fill_manual(values=c("orange","pink"), name="Species",
labels=df$species)
p
p <- ggplot(data=df, aes(x=score, y=management,colour=species)) + geom_point(size=0.5, alpha=.6) +
stat_ellipse(data=df, aes(x=score, y=management,colour=species, fill=factor(df$species)), size=1,
geom="polygon",level=0.95,alpha=0.4)+
scale_fill_manual(values=c("orange","blue"), name="Species",
labels=df$species)
p
p <- ggplot(data=df, aes(x=score, y=management,colour=species)) + geom_point(size=0.5, alpha=.6) +
stat_ellipse(data=df, aes(x=score, y=management,colour=species, fill=factor(df$species)), size=1,
geom="polygon",level=0.95,alpha=0.4)+
scale_fill_manual(values=c("orange","blue"), name="95% density",
labels=df$species)
p
df$species
p <- ggplot(data=df, aes(x=score, y=management,colour=species)) + geom_point(size=0.5, alpha=.6) +
stat_ellipse(data=df, aes(x=score, y=management,colour=species, fill=factor(df$species)), size=1,
geom="polygon",level=0.95,alpha=0.4)+
scale_fill_manual(values=c("orange","blue"), name="95% density",
labels=unique(df$species))
p
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
